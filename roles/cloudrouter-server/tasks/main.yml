# Need to use the net_mgmt network for acces from the Ansible server
#
#- name: add facts from OpenStack discovery
#  set_fact:
#    ansible_ssh_host: "{{ elastic_ip }}"

#- name: Display all variables/facts known for a host
#  debug: var=hostvars[inventory_hostname] verbosity=4
#
#- name: Install dnf
#  raw: sudo yum install -y dnf
#
#- name: Install python and deps for ansible module
#  raw: sudo dnf install -y python2 python2-dnf
#
#- name: Make sure libselinux-python are installed
#  dnf: name=libselinux-python state=present
#  become: yes
#  become_user: root

- name: fetch AWS public IP first
  set_fact:
    ansible_ssh_host: "{{ hostvars[inventory_hostname].ec2_ip_address }}"
  
- name: Wait for port 22 to become open
  local_action: wait_for port=22 host="{{ ansible_ssh_host | default(inventory_hostname) }}" search_regex=OpenSSH delay=10 timeout=1200

- name: Gather facts
  setup:  

#- name: Put a README in place
#  copy: src=README dest=/home/opnfv/README

#- name: Install openvpn
#  raw: sudo dnf install -y openvpn
#
#- name: Install bird
#  raw: sudo dnf install -y bird

- name: Ensures {{openvpn_dir}} dir exists
  file: path={{openvpn_dir}} state=directory
  become: true

- name: Copy test openvpn conf
  template: src=server.conf.j2 dest=/etc/openvpn/server.conf.j2
  become: yes
  become_user: root

- name: Test copy key file
  copy: src=static.key dest=/etc/openvpn/static.key
  become: yes
  become_user: root

- name: Let everyone know we are done
  file: path=/home/opnfv/CONFIGURED state=touch owner=opnfv group=opnfv mode=0775

#- name: Let everyone know we are done
#  template: src=CONFIGURED.j2 dest=/home/opnfv/CONFIGURED owner=opnfv group=opnfv mode="u=rw,g=r,o=r"

- name: start vpn server
  raw: sudo systemctl restart openvpn@server

- name: update forwarding table
  command: "{{item}}"
  with_items:
     - sudo iptables -I FORWARD -i tun0 -o eth0 -s {{ tunnel_cidr }} -d {{ subnets['amazon']['vlims']['cidrs'][0] }} -m conntrack --ctstate NEW -j ACCEPT
     - sudo iptables -I FORWARD -i tun0 -o eth1 -s {{ tunnel_cidr }} -m conntrack --ctstate NEW -j ACCEPT
     - sudo iptables -I FORWARD -i eth0 -o eth1 -s {{ subnets['amazon']['vlims']['cidrs'][0] }} -m conntrack --ctstate NEW -j ACCEPT
     - sudo iptables -I FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
     - sudo iptables -t nat -I POSTROUTING -o eth1 -s {{ tunnel_cidr }} -j MASQUERADE
     - sudo iptables -t nat -I POSTROUTING -o eth1 -s {{ subnets['amazon']['vlims']['cidrs'][0] }} -j MASQUERADE

